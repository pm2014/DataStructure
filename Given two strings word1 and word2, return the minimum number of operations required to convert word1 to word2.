class Solution {
    public int minDistance(String word1, String word2) {

                int [][] costMatrix = new int[word1.length()][word2.length()];
                char[] word1Char = word1.toCharArray();
                char[] word2Char = word2.toCharArray();
                int commonSubStrLen =  lcm(word1Char.length-1,word2Char.length-1, word1Char,  word2Char);
                
                return commonSubStrLen;

        
    }

    public int lcm(int i , int j, char[] word1Char, char[] word2Char) {
        // we could have sent j...but since index starts from 0 we have to send j+1
        if (i < 0)
            return j+1;
 
        // If second string is empty, the only option is to
        // remove all characters of first string
        if (j < 0)
            return i+1;
 
        if (word1Char[i] ==  word2Char[j])  {
            return lcm( i-1 ,  j-1, word1Char, word2Char);
        } else{
            // minimum of add , replace , subtract and +1 for the steps reqd to do it
            return Math.min(
                Math.min(lcm( i-1, j, word1Char, word2Char), lcm( i, j-1, word1Char, word2Char)),
            lcm( i-1, j-1, word1Char, word2Char)) + 1;

        }      
    }
}
