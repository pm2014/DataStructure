//62. Unique Paths
/*There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.*/

class Solution {
    public int uniquePaths(int m, int n) {
        int ways =0 ;
        int[][] cache = new int[m][n];
        for(int a =0 ; a< m ; a++){
            for(int b =0 ; b< n ; b++){
                cache[a][b] = 0;
            }
        }
        ways = totalPaths( m,  n, 0, 0, cache);
        return ways;
    }
    
     public int totalPaths(int m, int n, int i , int j, int[][] cache) {
            if( (i == (m-1)) && (j == (n-1)) ){
                return 1;
            }
            if( (i > (m-1)) || (j > (n-1)) ){
                return 0;
            }
            if(cache[i][j] > 0){
                return cache[i][j];
            }
                //assume taken right      + //assume taken down 
          int k = totalPaths(m, n ,  i+1, j, cache) +  totalPaths(m, n , i, j+1, cache);
          cache[i][j] = k;
          return k;
           }
}
